version: "3.9"
services:
  # üîπ MySQL para base de datos de  customer service
  mysql8:
    container_name: mysql8
    image: mysql:8
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: sasa
      MYSQL_DATABASE: db_cliente
    volumes:
      - data-mysql:/var/lib/mysql
    restart: always
    networks:
      - devsu
  # üîπ Postgres para base datos de account service
  postgres14:
    container_name: postgres14
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: sasa
      POSTGRES_DB: db_cuenta
    volumes:
      - data-postgres:/var/lib/postgresql/data
    restart: always
    networks:
      - devsu
  # üîπ Mongo para base de datos de transactional service
  mongodb:
    container_name: mongodb
    image: mongo
    ports:
      - "27017:27017"
    environment:
      MONGODB_INITDB_ROOT_USERNAME: mongouser
      MONGODB_INITDB_ROOT_PASSWORD: mongopass
      MONGO_INITDB_DATABASE: db_movimiento
    volumes:
      - data-mongo:/data/db
    restart: always
    networks:
      - devsu

  # üîπ Kafka para la publicacion y obtencion de eventos, de los microservicios account y transactional servcie
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
    volumes:
      - data-kafka:/bitnami/kafka
    networks:
      - devsu

  # üîπ Servicio que crea los t√≥picos y se destruye
  kafka-init-topics:
    image: bitnami/kafka:3.7
    depends_on:
      - kafka
    restart: "no"     # üëà no se reinicia
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
        "
        echo '‚è≥ Esperando a que Kafka arranque...'
        sleep 10
        echo '‚ö° Creando t√≥picos...'
        /opt/bitnami/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 3 --topic customer-events
        /opt/bitnami/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 3 --topic account-events
        /opt/bitnami/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --replication-factor 1 --partitions 3 --topic transaction-events
        echo '‚úÖ T√≥picos creados, cerrando contenedor...'
    networks:
      - devs

  # üîπ Servicio para monitore, creacio y modificacion de topicos
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
    networks:
      - devs


volumes:
  data-mysql:
    name: data-mysql
  data-postgres:
    name: data-postgres
  data-mongo:
    name: data-mongo
  data-kafka:
    name: data-kafka


networks:
  devsu:
    name: devsu
    driver: bridge